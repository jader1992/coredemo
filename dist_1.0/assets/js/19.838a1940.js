(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{482:function(e,n,t){"use strict";t.r(n);var a=t(61),r=Object(a.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"目录结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#目录结构"}},[e._v("#")]),e._v(" 目录结构")]),e._v(" "),t("p",[e._v("gocore 框架不仅仅是一个类库，也是一个定义了开发模式和目录结构的框架。 gocore 希望所有使用这个框架的开发人员遵照统一的项目结构进行开发。")]),e._v(" "),t("h2",{attrs:{id:"默认目录结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#默认目录结构"}},[e._v("#")]),e._v(" 默认目录结构")]),e._v(" "),t("p",[e._v("默认创建的项目结构为：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("[~/Documents/workspace/gocore_workspace]$ tree\n.\n├── README.md\n├── app // 服务端应用地址\n|    |// 存放自定义命令\n│   │   ├── command\n│   │   │   └── demo.go\n│   │   └── kernel.go\n│   ├── http  // 存放http服务\n│   │   ├── helper // 帮助类库\n│   │   │   ├── request.go\n│   │   │   └── response.go\n│   │   ├── kernel.go\n│   │   ├── middleware // 中间件\n│   │   ├── module // 业务模块\n│   │   │   └── demo\n│   │   │       ├── api.go // 业务模块接口\n│   │   │       ├── dto.go // 业务模块输出结构\n│   │   │       ├── mapper.go // 将服务结构转换为业务模块输出结构\n│   │   │       ├── model.go // 数据库结构定义\n│   │   │       ├── repository.go // 数据库逻辑封装层\n│   │   │       └── service.go // 服务层\n│   │   ├── route.go // 路由配置\n│   │   ├── swagger // swagger文件自动生成\n│   │   └── swagger.go\n│   └── provider // 服务提供方\n│       ├── demo\n│       │   ├── contract.go // 服务接口层\n│       │   ├── provider.go // 服务提供方\n│       │   └── service.go // 服务实现层\n│       └── kernel.go // 服务提供方注入\n├── babel.config.js\n├── config // 配置文件\n│   ├── development // development环境\n│   │   ├── app.yaml // app主应用的配置\n│   │   ├── database.yaml // 数据库相关配置\n│   │   ├── deploy.yaml // 部署相关配置\n│   │   ├── log.yaml // 日志相关配置\n│   │   └── swagger.yaml // swagger相关配置\n│   ├── production\n│   └── testing\n├── dist // 编译生成地址\n├── frontend // 前端应用地址\n│   ├── App.vue // vue入口文件\n│   ├── assets\n│   │   └── logo.png\n│   ├── components // vue组件\n│   │   └── HelloWorld.vue\n│   └── main.js // 前端入口文件\n├── go.mod\n├── go.sum\n├── main.go // app入口\n├── package.json // 前端package\n├── storage // 存储目录\n│   ├── cache // 存放本地缓存\n│   ├── coverage // 存放覆盖率报告\n│   ├── log // 存放业务日志\n│   └── pid // 存放pid\n│       └── app.pid\n├── tests // 测试相关数据\n│   └── env.go // 设置测试环境相关参数\n└── vue.config.js // vue配置\n\n25 directories, 37 files\n")])])]),t("p",[e._v("这里主要介绍下业务模块的分层结构")]),e._v(" "),t("h1",{attrs:{id:"业务模块分层"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#业务模块分层"}},[e._v("#")]),e._v(" 业务模块分层")]),e._v(" "),t("p",[e._v("业务模块的分层设计两种分层模型：简化模型和标准模型。基本稍微复杂一些的业务，都需要使用标准模型开发。")]),e._v(" "),t("h2",{attrs:{id:"简化模型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#简化模型"}},[e._v("#")]),e._v(" 简化模型")]),e._v(" "),t("p",[e._v("对于比较简单的业务，每个模块各自定义自己的 model 和 service，在一个 module 文件的文件夹中进行各自模块的业务开发")]),e._v(" "),t("p",[t("img",{attrs:{src:"http://tuchuang.funaio.cn/md/20200916111330.png",alt:"20200916111330"}})]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("├── api.go // 业务模块接口\n├── dto.go // 业务模块输出结构\n├── mapper.go // 将服务结构转换为业务模块输出结构\n├── model.go // 数据库结构定义\n├── repository.go // 数据库逻辑封装层\n└── service.go // 服务\n")])])]),t("p",[e._v("具体实现可以参考初始化代码的 Demo 接口实现")]),e._v(" "),t("h2",{attrs:{id:"标准模型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#标准模型"}},[e._v("#")]),e._v(" 标准模型")]),e._v(" "),t("p",[e._v("对于比较复杂的业务，模块与模块间的交互比较复杂，有很多公用性，所以提取 service provider 服务作为服务间的相互调用。")]),e._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[e._v("TIP")]),e._v(" "),t("p",[e._v("强烈建议使用这种开发模型")])]),e._v(" "),t("p",[t("img",{attrs:{src:"http://tuchuang.funaio.cn/md/20200916111454.png",alt:"20200916111454"}})]),e._v(" "),t("p",[e._v("第一步：创建当前业务的 provider。可以使用命令行 "),t("code",[e._v("./gocore provider new")]),e._v(" 来创建。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("[~/Documents/workspace/gocore_workspace]$ ./gocore provider new\ncreate a provider\n? please input provider name car\n? please input provider folder(default: provider name):\ncreate provider success, folder path: /Users/xxx/Documents/workspace/gocore_workspace/app/provider/car\nplease remember add provider to kernel\n")])])]),t("p",[e._v("定义好 provider 的协议")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('package demo\n\nconst DemoKey = "demo"\n\ntype IService interface {\n\tGetAllStudent() []Student\n}\n\ntype Student struct {\n\tID   int\n\tName string\n}\n\n')])])]),t("p",[e._v("实现对应协议：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('package demo\n\nimport "github.com/gogocore/gocore/framework"\n\ntype Service struct {\n\tcontainer framework.Container\n}\n\nfunc NewService(params ...interface{}) (interface{}, error) {\n\tcontainer := params[0].(framework.Container)\n\treturn &Service{container: container}, nil\n}\n\nfunc (s *Service) GetAllStudent() []Student {\n\treturn []Student{\n\t\t{\n\t\t\tID:   1,\n\t\t\tName: "foo",\n\t\t},\n\t\t{\n\t\t\tID:   2,\n\t\t\tName: "bar",\n\t\t},\n\t}\n}\n\n')])])]),t("p",[e._v("第二步：创建当前业务的模块。")]),e._v(" "),t("p",[e._v("可以按照demo文件夹中文件编写。")]),e._v(" "),t("p",[t("img",{attrs:{src:"http://tuchuang.funaio.cn/md/20200916172527.png",alt:"20200916172527"}})]),e._v(" "),t("p",[e._v("第三步：在当前业务中挂载业务模块。")]),e._v(" "),t("p",[t("img",{attrs:{src:"http://tuchuang.funaio.cn/md/20200916172752.png",alt:"20200916172752"}})]),e._v(" "),t("p",[e._v("第四步：使用 provider 来开发当前业务。")]),e._v(" "),t("div",{staticClass:"language-golang extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// Demo godoc\n// @Summary 获取所有学生\n// @Description 获取所有学生\n// @Produce  json\n// @Tags demo\n// @Success 200 array []UserDTO\n// @Router /demo/demo2 [get]\nfunc (api *DemoApi) Demo2(c *gin.Context) {\n\tdemoProvider := c.MustMake(demoService.DemoKey).(demoService.IService)\n\tstudents := demoProvider.GetAllStudent()\n\tusersDTO := StudentsToUserDTOs(students)\n\tc.JSON(200, usersDTO)\n}\n")])])]),t("p",[e._v("具体实现可以参考初始化代码的 Demo2 接口实现")])])}),[],!1,null,null,null);n.default=r.exports}}]);