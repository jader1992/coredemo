(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{492:function(n,t,e){"use strict";e.r(t);var i=e(61),s=Object(i.a)({},(function(){var n=this.$createElement,t=this._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[t("h1",{attrs:{id:"gocore-env"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#gocore-env"}},[this._v("#")]),this._v(" gocore:env")]),this._v(" "),t("p",[this._v("提供环境变量相关方法")]),this._v(" "),t("div",{staticClass:"language-golang extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('package contract\n\nconst (\n\t// EnvProduction represent the environment which build for production\n\tEnvProduction = "production"\n\t// EnvTesting represent the environment which build for test\n\tEnvTesting = "testing"\n\t// EnvDevelopment represent the environment which build for development\n\tEnvDevelopment = "development"\n\n\t// EnvKey is the key in container\n\tEnvKey = "gocore:env"\n)\n\n// Env define golang run enviornment\n// it set some config which want ignored in git\ntype Env interface {\n\t// AppEnv get current environment\n\tAppEnv() string\n\n\t// IsExist check setting is exist\n\tIsExist(string) bool\n\t// Get environment setting, if not exist, return ""\n\tGet(string) string\n\t// All return all settings\n\tAll() map[string]string\n}\n\n')])])])])}),[],!1,null,null,null);t.default=s.exports}}]);